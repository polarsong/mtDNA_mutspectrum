summary(pgls_mt_not_fly)
pgls_mt_not_fly = gls(GhAhSkew~ability_to_fly_binar_extra,
data=df_fly_not1,correlation=corBM2)
summary(pgls_mt_not_fly)
#new PGLS for birds
rm(list = ls(all=TRUE))
library(phytools)
library(nlme)
library(geiger)
#flying birds
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_fly_peng = df_flight[df_flight$ability_to_fly == 'Flying' | df_flight$ability_to_fly =='Sphenisciformes',]
df_fly_not = df_flight[df_flight$ability_to_fly !='Sphenisciformes',]
peng_fly_tree = read.tree('flying_and_peng.tre')
no_peng_fly_tree = read.tree('flying_and_no_peng.tre')
df_fly_not[df_fly_not$ability_to_fly != 'Flying',]$ability_to_fly = 'Non-flying'
spp = rownames(df_fly_not)
#mutspec PGLS
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_fly_peng1 = merge(df_fly_peng, df_ff1)
df_fly_peng1 = merge(df_fly_peng1, df_syn1)
need_species = setdiff(df_fly_peng$species_name, df_fly_peng1$species_name)
correct_need_species = setdiff(df_fly_peng$species_name, need_species)
peng_fly_tree1<-keep.tip(peng_fly_tree,correct_need_species)
df_fly_peng1$Mutation_AG = as.numeric(df_fly_peng1$Mutation_AG)
df_fly_peng1$Mutation_AG_syn = as.numeric(df_fly_peng1$Mutation_AG_syn)
df_fly_peng1$Mutation_CT = as.numeric(df_fly_peng1$Mutation_CT)
df_fly_peng1$Mutation_CT_syn = as.numeric(df_fly_peng1$Mutation_CT_syn)
df_fly_peng1$ability_to_fly_binar = 0
df_fly_peng1[df_fly_peng1$ability_to_fly == 'Sphenisciformes',]$ability_to_fly_binar = 1
df_fly_peng1$ability_to_fly_binar_extra = 1
df_fly_peng1[df_fly_peng1$ability_to_fly == 'Sphenisciformes',]$ability_to_fly_binar_extra = 0
row.names(df_fly_peng1) = df_fly_peng1$species_name
spp1 = rownames(df_fly_peng1)
corBM1 = corBrownian(phy=peng_fly_tree1,form=~spp1)
pgls_mt_peng = gls(GhAhSkew~ability_to_fly_binar_extra,
data=df_fly_peng1,correlation=corBM1)
summary(pgls_mt_peng)
df_fly_not1 = merge(df_fly_not, df_ff1)
df_fly_not1 = merge(df_fly_not1, df_syn1)
need_species = setdiff(df_fly_not$species_name, df_fly_not1$species_name)
correct_need_species = setdiff(df_fly_not$species_name, need_species)
not_fly_tree = read.tree('flying_and_no_peng.tre')
not_fly_tree1<-keep.tip(not_fly_tree,correct_need_species)
df_fly_not1$Mutation_AG = as.numeric(df_fly_not1$Mutation_AG)
df_fly_not1$Mutation_AG_syn = as.numeric(df_fly_not1$Mutation_AG_syn)
df_fly_not1$Mutation_CT = as.numeric(df_fly_not1$Mutation_CT)
df_fly_not1$Mutation_CT_syn = as.numeric(df_fly_not1$Mutation_CT_syn)
df_fly_not2 = df_fly_not1
df_fly_not2[df_fly_not2$ability_to_fly != 'Flying',]$ability_to_fly = 'Non-flying'
df_fly_not1$ability_to_fly_binar = 0
df_fly_not1[df_fly_not1$ability_to_fly != 'Flying',]$ability_to_fly_binar = 1
df_fly_not1$ability_to_fly_binar_extra = 1
df_fly_not1[df_fly_not1$ability_to_fly != 'Flying',]$ability_to_fly_binar_extra = 0
row.names(df_fly_not1) = df_fly_not1$species_name
spp2 = rownames(df_fly_not1)
corBM2 = corBrownian(phy=not_fly_tree1,form=~spp2)
pgls_mt_not_fly = gls(GhAhSkew~ability_to_fly_binar_extra,
data=df_fly_not1,correlation=corBM2)
summary(pgls_mt_not_fly)
#dive pgls
df_dive = read.csv('dive_and_gene.csv')
df_dive = df_dive[,c(2:6)]
dive_tree = read.tree('diving_birds_tree.tre')
row.names(df_dive) = df_dive$species_name
df_dive1 = merge(df_dive, df_syn1)
unique(df_dive1$ability_to_dive)
df_dive2 = df_dive1
df_dive1[df_dive1$ability_to_dive == 'Anseriformes',]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Sphenisciformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Podicipediformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Gaviiformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Suliformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Charadriiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Coraciiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Passeriformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Procellariiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Gruiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1$GhAhSkew = as.numeric(as.character(df_dive1$GhAhSkew))
df_dive1$Mutation_AG_syn = as.numeric(as.character(df_dive1$Mutation_AG_syn))
row.names(df_dive1) = df_dive1$species_name
need_species = setdiff(df_dive$species_name, df_dive1$species_name)
correct_need_species = setdiff(df_dive$species_name, need_species)
dive_tree1 = keep.tip(dive_tree,correct_need_species)
df_dive1$ability_to_dive_binar = 0
View(df_dive1)
df_dive1[df_dive1$ability_to_dive != 'Non-diving',]$ability_to_dive_binar = 1
spp4 = rownames(df_dive1)
corBM4 = corBrownian(phy=dive_tree1,form=~spp4)
pgls_dive = gls(GhAhSkew~ability_to_dive_binar,
data=df_dive1,correlation=corBM4)
summary(pgls_dive)
df_dive11 = df_dive1[df_dive1$ability_to_dive != 'Diving_some_species',]
row.names(df_dive11) = df_dive11$species_name
need_species = setdiff(df_dive1$species_name, df_dive11$species_name)
correct_need_species = setdiff(df_dive1$species_name, need_species)
dive_tree11 = keep.tip(dive_tree1,correct_need_species)
View(dive_tree11)
View(df_dive11)
spp5 = rownames(df_dive11)
corBM5 = corBrownian(phy=dive_tree11,form=~spp5)
pgls_dive1 = gls(GhAhSkew~ability_to_dive_binar,
data=df_dive11,correlation=corBM5)
summary(pgls_dive1)
df_dive12 = df_dive1[df_dive1$ability_to_dive != 'Diving_all_species',]
row.names(df_dive12) = df_dive12$species_name
need_species = setdiff(df_dive1$species_name, df_dive12$species_name)
correct_need_species = setdiff(df_dive1$species_name, need_species)
dive_tree12 = keep.tip(dive_tree1,correct_need_species)
View(dive_tree12)
View(df_dive12)
spp6 = rownames(df_dive12)
corBM6 = corBrownian(phy=dive_tree12,form=~spp6)
pgls_dive2 = gls(GhAhSkew~ability_to_dive_binar,
data=df_dive12,correlation=corBM6)
summary(pgls_dive2)
?fingerprint.regression
??fingerprint.regression
??fingerprint.regression()
fingerprint.regression(df_fly_peng1)
?gls
pgls_dive2$modelStruct
a = pgls_dive2$modelStruct
View(a)
a
a = pgls_dive2$dims
a = pgls_dive2$contrasts
a = pgls_dive2$coefficients
a = pgls_dive2$varBeta
a = pgls_dive2$sigma
a = pgls_dive2$apVar
a = pgls_dive2$logLik
a = pgls_dive2$numIter
a = pgls_dive2$groups
a = pgls_dive2$call
a = pgls_dive2$terms
a = pgls_dive2$method
a = pgls_dive2$fitted
a = pgls_dive2$residuals
a = pgls_dive2$na.action
a = pgls_dive2$parAssign
View(a)
#Paper pictures
rm(list = ls(all=TRUE))
library(ggbiplot)
library(ggplot2)
library(ggpubr)
library(ggbiplot)
df_mtdna = read.csv('../Paper_materials/Birds_dataset_paper_extra.csv')
df_nd6 = read.csv('../Body/3Results/Birds_mtDNA_data.csv')
nd6_look = df_nd6[df_nd6$gene_name == 'ND6',]
nd6_nolook = df_nd6[df_nd6$gene_name != 'ND6',]
nd6_look$GhAhSkew = (nd6_look$neutral_g - nd6_look$neutral_A)/(nd6_look$neutral_g + nd6_look$neutral_A)
nd6_look$ThChSkew = (nd6_look$neutral_T - nd6_look$neutral_c)/(nd6_look$neutral_T + nd6_look$neutral_c)
nd6_look$fTn = nd6_look$neutral_T/nd6_look$neutral_amount
nd6_look$fAn = nd6_look$neutral_A/nd6_look$neutral_amount
nd6_look$fCn = nd6_look$neutral_c/nd6_look$neutral_amount
nd6_look$fGn = nd6_look$neutral_g/nd6_look$neutral_amount
nd6_nolook$GhAhSkew = (nd6_nolook$neutral_c- nd6_nolook$neutral_T)/(nd6_nolook$neutral_c + nd6_nolook$neutral_T)
nd6_nolook$ThChSkew = (nd6_nolook$neutral_A - nd6_nolook$neutral_g)/(nd6_nolook$neutral_A + nd6_nolook$neutral_g)
nd6_nolook$fTn = nd6_nolook$neutral_A/nd6_nolook$neutral_amount
nd6_nolook$fAn = nd6_nolook$neutral_T/nd6_nolook$neutral_amount
nd6_nolook$fCn = nd6_nolook$neutral_g/nd6_nolook$neutral_amount
nd6_nolook$fGn = nd6_nolook$neutral_c/nd6_nolook$neutral_amount
nd6_correct = rbind(nd6_look, nd6_nolook)
graph1 = ggplot(data = nd6_correct, aes(x = gene_name, y = fTn))+
geom_boxplot(notch = TRUE, fill = 'blue')+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB", "ND6", "ND1","ND2"))+
ylim(0, 0.8)+
annotate("text", x=11, y=0.78, label= "Th")+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank(),
axis.title.y=element_blank(),axis.ticks.y=element_blank())
graph1
df_nd6 = read.csv('../Body/3Results/Birds_mtDNA_data.csv')
df_tr_ts = read.csv('../../Head/2Scripts/PCM_in_R_implementations/TR_TS_dataset.csv')
df_tr_ts = read.csv('TR_TS_dataset.csv')
View(df_tr_ts)
df_tr_ts = df_tr_ts[,c(2:19)]
View(df_tr_ts)
#new PGLS for birds
rm(list = ls(all=TRUE))
library(phytools)
library(nlme)
library(geiger)
#flying birds
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_fly_peng = df_flight[df_flight$ability_to_fly == 'Flying' | df_flight$ability_to_fly =='Sphenisciformes',]
df_fly_not = df_flight[df_flight$ability_to_fly !='Sphenisciformes',]
peng_fly_tree = read.tree('flying_and_peng.tre')
no_peng_fly_tree = read.tree('flying_and_no_peng.tre')
df_fly_not[df_fly_not$ability_to_fly != 'Flying',]$ability_to_fly = 'Non-flying'
#mutspec PGLS
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_fly_peng1 = merge(df_fly_peng, df_ff1)
df_fly_peng1 = merge(df_fly_peng1, df_syn1)
need_species = setdiff(df_fly_peng$species_name, df_fly_peng1$species_name)
correct_need_species = setdiff(df_fly_peng$species_name, need_species)
peng_fly_tree1<-keep.tip(peng_fly_tree,correct_need_species)
df_fly_peng1$Mutation_AG = as.numeric(df_fly_peng1$Mutation_AG)
df_fly_peng1$Mutation_AG_syn = as.numeric(df_fly_peng1$Mutation_AG_syn)
df_fly_peng1$Mutation_CT = as.numeric(df_fly_peng1$Mutation_CT)
df_fly_peng1$Mutation_CT_syn = as.numeric(df_fly_peng1$Mutation_CT_syn)
df_fly_peng1$ability_to_fly_binar = 0
df_fly_peng1[df_fly_peng1$ability_to_fly == 'Sphenisciformes',]$ability_to_fly_binar = 1
df_fly_peng1$ability_to_fly_binar_extra = 1
df_fly_peng1[df_fly_peng1$ability_to_fly == 'Sphenisciformes',]$ability_to_fly_binar_extra = 0
row.names(df_fly_peng1) = df_fly_peng1$species_name
df_fly_not1 = merge(df_fly_not, df_ff1)
df_fly_not1 = merge(df_fly_not1, df_syn1)
need_species = setdiff(df_fly_not$species_name, df_fly_not1$species_name)
correct_need_species = setdiff(df_fly_not$species_name, need_species)
not_fly_tree = read.tree('flying_and_no_peng.tre')
not_fly_tree1<-keep.tip(not_fly_tree,correct_need_species)
df_fly_not1$Mutation_AG = as.numeric(df_fly_not1$Mutation_AG)
df_fly_not1$Mutation_AG_syn = as.numeric(df_fly_not1$Mutation_AG_syn)
df_fly_not1$Mutation_CT = as.numeric(df_fly_not1$Mutation_CT)
df_fly_not1$Mutation_CT_syn = as.numeric(df_fly_not1$Mutation_CT_syn)
df_fly_not2 = df_fly_not1
df_fly_not2[df_fly_not2$ability_to_fly != 'Flying',]$ability_to_fly = 'Non-flying'
df_fly_not1$ability_to_fly_binar = 0
df_fly_not1[df_fly_not1$ability_to_fly != 'Flying',]$ability_to_fly_binar = 1
df_fly_not1$ability_to_fly_binar_extra = 1
df_fly_not1[df_fly_not1$ability_to_fly != 'Flying',]$ability_to_fly_binar_extra = 0
row.names(df_fly_not1) = df_fly_not1$species_name
#dive pgls
df_dive = read.csv('dive_and_gene.csv')
df_dive = df_dive[,c(2:6)]
dive_tree = read.tree('diving_birds_tree.tre')
row.names(df_dive) = df_dive$species_name
df_dive1 = merge(df_dive, df_syn1)
unique(df_dive1$ability_to_dive)
df_dive2 = df_dive1
df_dive1[df_dive1$ability_to_dive == 'Anseriformes',]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Sphenisciformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Podicipediformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Gaviiformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Suliformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Charadriiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Coraciiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Passeriformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Procellariiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Gruiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1$GhAhSkew = as.numeric(as.character(df_dive1$GhAhSkew))
df_dive1$Mutation_AG_syn = as.numeric(as.character(df_dive1$Mutation_AG_syn))
row.names(df_dive1) = df_dive1$species_name
need_species = setdiff(df_dive$species_name, df_dive1$species_name)
correct_need_species = setdiff(df_dive$species_name, need_species)
dive_tree1 = keep.tip(dive_tree,correct_need_species)
df_dive1$ability_to_dive_binar = 0
df_dive1[df_dive1$ability_to_dive != 'Non-diving',]$ability_to_dive_binar = 1
df_dive11 = df_dive1[df_dive1$ability_to_dive != 'Diving_some_species',]
row.names(df_dive11) = df_dive11$species_name
need_species = setdiff(df_dive1$species_name, df_dive11$species_name)
correct_need_species = setdiff(df_dive1$species_name, need_species)
dive_tree11 = keep.tip(dive_tree1,correct_need_species)
df_dive12 = df_dive1[df_dive1$ability_to_dive != 'Diving_all_species',]
row.names(df_dive12) = df_dive12$species_name
need_species = setdiff(df_dive1$species_name, df_dive12$species_name)
correct_need_species = setdiff(df_dive1$species_name, need_species)
dive_tree12 = keep.tip(dive_tree1,correct_need_species)
#TR_TS
df_tr_ts = read.csv('TR_TS_dataset.csv')
df_tr_ts = df_tr_ts[,c(2:19)]
View(df_tr_ts)
View(df_tr_ts)
df_tr_ts = df_tr_ts[,c(1,16:18)]
View(df_tr_ts)
View(df_fly_peng1)
#new PGLS for birds
rm(list = ls(all=TRUE))
library(phytools)
library(nlme)
library(geiger)
#flying birds
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_fly_peng = df_flight[df_flight$ability_to_fly == 'Flying' | df_flight$ability_to_fly =='Sphenisciformes',]
df_fly_not = df_flight[df_flight$ability_to_fly !='Sphenisciformes',]
peng_fly_tree = read.tree('flying_and_peng.tre')
#mutspec PGLS
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
View(df_syn1)
View(df_ff)
View(df_mutspec)
View(df_syn)
rm(list = ls(all=TRUE))
library(phytools)
library(nlme)
library(geiger)
library(ggtree)
peng_data_tree = read.tree('peng_and_fly_all_data.tre')
birds_tree = read.tree('anc_kg.treefile')
df_mtdna = read.csv('Birds_dataset_paper.csv')
df_need = data.frame()
for (i in unique(df_mtdna$species_name))
{
a = df_mtdna[df_mtdna$species_name == i,]
b = sum(a$chthSkew)/12
ab = c(i,b)
df_need = rbind(df_need, ab)
}
names(df_need) = c('species_name', 'ChThSkew')
df_need$species_name = gsub(' ', '_', df_need$species_name)
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_mutspec = read.table('C:/Users/User/Desktop/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_flight1 = merge(df_flight, df_ff1)
df_flight1 = merge(df_flight1, df_syn1)
need_species = setdiff(df_flight$species_name, df_flight1$species_name)
correct_need_species = setdiff(df_flight$species_name, need_species)
birds_ms_tree<-keep.tip(flying_tree,correct_need_species)
df_flight1$GhAhSkew = as.numeric(df_flight1$GhAhSkew)
df_flight1$Mutation_AG = as.numeric(df_flight1$Mutation_AG)
df_flight1$Mutation_AG_syn = as.numeric(df_flight1$Mutation_AG_syn)
df_flight1$Mutation_CT = as.numeric(df_flight1$Mutation_CT)
df_flight1$Mutation_CT_syn = as.numeric(df_flight1$Mutation_CT_syn)
rownames(df_flight1)= df_flight1$species_name
df_flight1$double_fly = 0
df_flight1[df_flight1$ability_to_fly == 'Flying',]$double_fly = 1
df_temp_fly = read.csv('birds_metrics.csv')
df_temp_fly = df_temp_fly[,c(2:17)]
df_flight2 = merge(df_flight1, df_temp_fly)
need_species = setdiff(df_flight1$species_name, df_flight2$species_name)
correct_need_species = setdiff(df_flight1$species_name, need_species)
birds_ms_and_temp_tree<-keep.tip(birds_ms_tree,correct_need_species)
row.names(df_flight2) = df_flight2$species_name
df_flight2$Latitude = gsub(',', '.', df_flight2$Latitude)
df_flight2$TempRange = gsub(',', '.', df_flight2$TempRange)
df_flight2$AnnualPrecip = gsub(',', '.', df_flight2$AnnualPrecip)
df_flight2$PrecipRange= gsub(',', '.', df_flight2$PrecipRange)
df_flight2$AnnualTemp= gsub(',', '.', df_flight2$AnnualTemp)
df_flight2$AnnualTemp = as.numeric(as.character(df_flight2$AnnualTemp))
df_flight2$Beak_length_Culmen = as.numeric(as.character(df_flight2$Beak_length_Culmen))
df_flight2$Beak_length_Nares = as.numeric(as.character(df_flight2$Beak_length_Nares))
df_flight2$Beak_width = as.numeric(as.character(df_flight2$Beak_width))
df_flight2$Beak_depth = as.numeric(as.character(df_flight2$Beak_depth))
df_flight2$Tarsus_length = as.numeric(as.character(df_flight2$Tarsus_length))
df_flight2$Wing_length = as.numeric(as.character(df_flight2$Wing_length))
df_flight2$Kipps_distance = as.numeric(as.character(df_flight2$Kipps_distance))
df_flight2$Hand_wing_index = as.numeric(as.character(df_flight2$Hand_wing_index))
df_flight2$Tail_length = as.numeric(as.character(df_flight2$Tail_length))
df_flight2$Mass = as.numeric(as.character(df_flight2$Mass))
df_flight2$Latitude = as.numeric(as.character(df_flight2$Latitude))
df_flight2$AnnualTemp = as.numeric(as.character(df_flight2$AnnualTemp))
df_flight2$TempRange = as.numeric(as.character(df_flight2$TempRange))
df_flight2$AnnualPrecip = as.numeric(as.character(df_flight2$AnnualPrecip))
df_flight2$PrecipRange = as.numeric(as.character(df_flight2$PrecipRange))
df_flight2$Mass = log10(df_flight2$Mass)
df_flight2$Beak_length_Culmen = log10(df_flight2$Beak_length_Culmen)
df_flight2$Beak_length_Nares = log10(df_flight2$Beak_length_Nares)
df_flight2$Beak_width = log10(df_flight2$Beak_width)
df_flight2$Beak_depth = log10(df_flight2$Beak_depth)
df_flight2$Tarsus_length = log10(df_flight2$Tarsus_length)
df_flight2$Wing_length = log10(df_flight2$Wing_length)
df_flight2$Kipps_distance = log10(df_flight2$Kipps_distance)
df_flight2$Hand_wing_index = log10(df_flight2$Hand_wing_index)
df_flight2$Tail_length = log10(df_flight2$Tail_length)
df_flight2$TempRange = log10(df_flight2$TempRange)
df_flight2$AnnualPrecip = log10(df_flight2$AnnualPrecip)
df_flight2$PrecipRange = log10(df_flight2$PrecipRange)
df_flight2$Mass = log10(df_flight2$Mass)
df_flight2 = merge(df_flight2, df_need)
df_flight2$ChThSkew = as.numeric(as.character(df_flight2$ChThSkew))
row.names(df_flight2) = df_flight2$species_name
df_midori = read.csv('C:/Users/User/Desktop/internal_12_syn_mutspec_all.csv')
df_midori = df_midori[,c(2,5,6)]
df_midori1 = reshape(data = df_midori, idvar = 'gene_and_species',
timevar = 'Mut',
direction = 'wide')
library(stringr)
df_midori1[,c('gene', 'species_name')] = str_split_fixed(df_midori1$gene_and_species, "_", 2)
df_midori1 = df_midori1[,c(2:15)]
names(df_midori1) = c('Mutation_TC_midori', 'Mutation_TA_midori', 'Mutation_GT_midori', 'Mutation_GC_midori',
'Mutation_GA_midori', 'Mutation_CT_midori', 'Mutation_CG_midori', 'Mutation_CA_midori',
'Mutation_AT_midori', 'Mutation_AG_midori', 'Mutation_AC_midori', 'Mutation_TG_midori',
'gene', 'species_name')
library(dplyr)
df_midori2 <- df_midori1 %>% mutate(across(c('species_name'), substr, 2, nchar(species_name)))
df_midori_cytb = df_midori2[df_midori2$gene == "ND6",] #  "A6"   "A8"   "CO1"  "CO2"  "CO3"  "Cytb" "ND1"  "ND2"  "ND3"  "ND4"  "ND4L" "ND5"  "ND6"
df_flight3 = merge(df_flight2, df_midori_cytb) #big cox1 cytb nd2
df_need1 = data.frame()
for (k in unique(df_midori2$species_name))
{
a1 = df_midori2[df_midori2$species_name == k,]
b1 = nrow(a1)
ab1 = sum(a1$Mutation_AG_midori)/b1
f = c(k, ab1)
df_need1 = rbind(df_need1, f)
}
names(df_need1) = c('species_name', 'Midori_AG_mutspec')
df_flight4 = merge(df_flight2, df_need1)
View(df_flight2)
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight2$GhAhSkew,rownames(df_flight2))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(birds_ms_and_temp_tree,lnTL,vars=TRUE,CI=TRUE)
print(fit.lnTL,printlen=10)
## compute "contMap" object
birds_contMap<-contMap(birds_ms_and_temp_tree,lnTL,
plot=FALSE)
## plot "contMap" object
plot(birds_contMap,sig=2,fsize=c(0.45,0.9),
lwd=c(2,3))
rm(list = ls(all=TRUE))
