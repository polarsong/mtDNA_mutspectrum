rm(list = ls(all=TRUE))
library(ggfortify)
library(ggplot2)
library(ggpubr)
library(ggbiplot)
library(phytools)
library(nlme)
library(geiger)
library(ggtree)
library(stringr)
library(dplyr)
df_mtdna = read.csv('../../Paper_materials_2024/Birds_dataset_paper.csv')
df_nd6 = read.csv('../../Paper_materials_2024/Birds_mtDNA_data.csv')
df_nd6$GhAhSkew = (df_nd6$neutral_g - df_nd6$neutral_A)/(df_nd6$neutral_g + df_nd6$neutral_A)
df_nd6$ThChSkew = (df_nd6$neutral_T - df_nd6$neutral_c)/(df_nd6$neutral_T + df_nd6$neutral_c)
df_nd6$fTn = df_nd6$neutral_T/df_nd6$neutral_amount
df_nd6$fAn = df_nd6$neutral_A/df_nd6$neutral_amount
df_nd6$fCn = df_nd6$neutral_c/df_nd6$neutral_amount
df_nd6$fGn = df_nd6$neutral_g/df_nd6$neutral_amount
df_nd6$GhAhSkew = (df_nd6$neutral_c- df_nd6$neutral_T)/(df_nd6$neutral_c + df_nd6$neutral_T)
df_nd6$ThChSkew = (df_nd6$neutral_A - df_nd6$neutral_g)/(df_nd6$neutral_A + df_nd6$neutral_g)
df_nd6$fTn = df_nd6$neutral_A/df_nd6$neutral_amount
df_nd6$fAn = df_nd6$neutral_T/df_nd6$neutral_amount
df_nd6$fCn = df_nd6$neutral_g/df_nd6$neutral_amount
df_nd6$fGn = df_nd6$neutral_c/df_nd6$neutral_amount
rm(list = ls(all=TRUE))
library(ggfortify)
library(ggplot2)
library(ggpubr)
library(ggbiplot)
library(phytools)
library(nlme)
library(geiger)
library(ggtree)
library(stringr)
library(dplyr)
df_mtdna = read.csv('../../Paper_materials_2024/Birds_dataset_paper.csv')
df_nd6 = read.csv('../../Paper_materials_2024/Birds_mtDNA_data.csv')
df_nd6$GhAhSkew = (df_nd6$neutral_g - df_nd6$neutral_A)/(df_nd6$neutral_g + df_nd6$neutral_A)
df_nd6$ThChSkew = (df_nd6$neutral_T - df_nd6$neutral_c)/(df_nd6$neutral_T + df_nd6$neutral_c)
df_nd6$fTn = df_nd6$neutral_T/df_nd6$neutral_amount
df_nd6$fAn = df_nd6$neutral_A/df_nd6$neutral_amount
df_nd6$fCn = df_nd6$neutral_c/df_nd6$neutral_amount
df_nd6$fGn = df_nd6$neutral_g/df_nd6$neutral_amount
df_nd6$GhAhSkew = (df_nd6$neutral_c- df_nd6$neutral_T)/(df_nd6$neutral_c + df_nd6$neutral_T)
df_nd6$ThChSkew = (df_nd6$neutral_A - df_nd6$neutral_g)/(df_nd6$neutral_A + df_nd6$neutral_g)
df_nd6$fTn = df_nd6$neutral_A/df_nd6$neutral_amount
df_nd6$fAn = df_nd6$neutral_T/df_nd6$neutral_amount
df_nd6$fCn = df_nd6$neutral_g/df_nd6$neutral_amount
df_nd6$fGn = df_nd6$neutral_c/df_nd6$neutral_amount
mut_data = read.table("mutspec12.tsv", header = TRUE, fill = TRUE)
mut_data = read.table("../../mutspec12.tsv", header = TRUE, fill = TRUE)
mut_data = read.table("../../Paper_materials_2024/mutspec12.tsv", header = TRUE, fill = TRUE)
mut_data_syn = mut_data[mut_data$Label == 'syn',]
mut_data_syn = mut_data_syn[,c(1,2,3,4,5,7,8)]
mut_data_syn = mut_data_syn[!grepl('Node', mut_data_syn$AltNode),]
names(mut_data_syn) = c('Mut', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'species_name', 'Label')
mut_data_syn$MutSpec =  as.numeric(mut_data_syn$MutSpec)
AC = mut_data_syn[mut_data_syn$Mut == 'A>C',]
AG = mut_data_syn[mut_data_syn$Mut == 'A>G',]
AT = mut_data_syn[mut_data_syn$Mut == 'A>T',]
GC = mut_data_syn[mut_data_syn$Mut == 'G>C',]
GT = mut_data_syn[mut_data_syn$Mut == 'G>T',]
GA = mut_data_syn[mut_data_syn$Mut == 'G>A',]
CG = mut_data_syn[mut_data_syn$Mut == 'C>G',]
CT = mut_data_syn[mut_data_syn$Mut == 'C>T',]
CA = mut_data_syn[mut_data_syn$Mut == 'C>A',]
TG = mut_data_syn[mut_data_syn$Mut == 'T>G',]
TC = mut_data_syn[mut_data_syn$Mut == 'T>C',]
TA = mut_data_syn[mut_data_syn$Mut == 'T>A',]
AC = replace(AC, 'A>C', 'T>G')
AC = AC[,c(2,3,4,5,6,7,8)]
names(AC) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
AG = replace(AG, 'A>G', 'T>C')
AG = AG[,c(2,3,4,5,6,7,8)]
names(AG) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
AT = replace(AT, 'A>T', 'T>A')
AT = AT[,c(2,3,4,5,6,7,8)]
names(AT) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
GC = replace(GC, 'G>C', 'C>G')
GC = GC[,c(2,3,4,5,6,7,8)]
names(GC) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
GT = replace(GT, 'G>T', 'C>A')
GT = GT[,c(2,3,4,5,6,7,8)]
names(GT) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
GA = replace(GA, 'G>A', 'C>T')
GA = GA[,c(2,3,4,5,6,7,8)]
names(GA) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
CG = replace(CG, 'C>G', 'G>C')
CG = CG[,c(2,3,4,5,6,7,8)]
names(CG) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
CT = replace(CT, 'C>T', 'G>A')
CT = CT[,c(2,3,4,5,6,7,8)]
names(CT) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
CA = replace(CA, 'C>A', 'G>T')
CA = CA[,c(2,3,4,5,6,7,8)]
names(CA) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
TG = replace(TG, 'T>G', 'A>C')
TG = TG[,c(2,3,4,5,6,7,8)]
names(TG) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
TC = replace(TC, 'T>C', 'A>G')
TC = TC[,c(2,3,4,5,6,7,8)]
names(TC) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
TA = replace(TA, 'T>A', 'A>T')
TA = TA[,c(2,3,4,5,6,7,8)]
names(TA) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
mut_data_syn1 = rbind(AC, AG, AT, GC, GT, GA, CT, CA, CG, TA, TG, TC)
mutspec_graph = ggplot(data = mut_data_syn1, aes(x = Mut, y = MutSpec)) +
geom_boxplot()+
ylab('Mitochondrial DNA mutational spectrum')+
xlab('Mitochondrial DNA mutations')
mutspec_graph
peng_data_tree = read.tree('../../Paper_materials_2024/peng_and_fly_all_data.tre')
birds_tree = read.tree('../../Paper_materials_2024/anc_kg.treefile')
df_mtdna = read.csv('../../Paper_materials_2024/Birds_dataset_paper.csv')
df_need = data.frame()
for (i in unique(df_mtdna$species_name))
{
a = df_mtdna[df_mtdna$species_name == i,]
b = sum(a$chthSkew)/12
ab = c(i,b)
df_need = rbind(df_need, ab)
}
names(df_need) = c('species_name', 'ChThSkew')
df_need$species_name = gsub(' ', '_', df_need$species_name)
df_flight = read.csv('../../Paper_materials_2024/flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('../../Paper_materials_2024/flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_mutspec = read.table('../../Paper_materials_2024/mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_flight1 = merge(df_flight, df_ff1)
df_flight1 = merge(df_flight1, df_syn1)
need_species = setdiff(df_flight$species_name, df_flight1$species_name)
correct_need_species = setdiff(df_flight$species_name, need_species)
birds_ms_tree<-keep.tip(flying_tree,correct_need_species)
df_flight1$GhAhSkew = as.numeric(df_flight1$GhAhSkew)
df_flight1$Mutation_AG = as.numeric(df_flight1$Mutation_AG)
df_flight1$Mutation_AG_syn = as.numeric(df_flight1$Mutation_AG_syn)
df_flight1$Mutation_CT = as.numeric(df_flight1$Mutation_CT)
df_flight1$Mutation_CT_syn = as.numeric(df_flight1$Mutation_CT_syn)
rownames(df_flight1)= df_flight1$species_name
df_flight1$double_fly = 0
df_flight1[df_flight1$ability_to_fly == 'Flying',]$double_fly = 1
df_temp_fly = read.csv('../../Paper_materials_2024/birds_metrics.csv')
df_temp_fly = df_temp_fly[,c(2:17)]
df_flight2 = merge(df_flight1, df_temp_fly)
need_species = setdiff(df_flight1$species_name, df_flight2$species_name)
correct_need_species = setdiff(df_flight1$species_name, need_species)
birds_ms_and_temp_tree<-keep.tip(birds_ms_tree,correct_need_species)
row.names(df_flight2) = df_flight2$species_name
df_flight2$Latitude = gsub(',', '.', df_flight2$Latitude)
df_flight2$TempRange = gsub(',', '.', df_flight2$TempRange)
df_flight2$AnnualPrecip = gsub(',', '.', df_flight2$AnnualPrecip)
df_flight2$PrecipRange= gsub(',', '.', df_flight2$PrecipRange)
df_flight2$AnnualTemp= gsub(',', '.', df_flight2$AnnualTemp)
df_flight2$AnnualTemp = as.numeric(as.character(df_flight2$AnnualTemp))
df_flight2$Beak_length_Culmen = as.numeric(as.character(df_flight2$Beak_length_Culmen))
df_flight2$Beak_length_Nares = as.numeric(as.character(df_flight2$Beak_length_Nares))
df_flight2$Beak_width = as.numeric(as.character(df_flight2$Beak_width))
df_flight2$Beak_depth = as.numeric(as.character(df_flight2$Beak_depth))
df_flight2$Tarsus_length = as.numeric(as.character(df_flight2$Tarsus_length))
df_flight2$Wing_length = as.numeric(as.character(df_flight2$Wing_length))
df_flight2$Kipps_distance = as.numeric(as.character(df_flight2$Kipps_distance))
df_flight2$Hand_wing_index = as.numeric(as.character(df_flight2$Hand_wing_index))
df_flight2$Tail_length = as.numeric(as.character(df_flight2$Tail_length))
df_flight2$Mass = as.numeric(as.character(df_flight2$Mass))
df_flight2$Latitude = as.numeric(as.character(df_flight2$Latitude))
df_flight2$AnnualTemp = as.numeric(as.character(df_flight2$AnnualTemp))
df_flight2$TempRange = as.numeric(as.character(df_flight2$TempRange))
df_flight2$AnnualPrecip = as.numeric(as.character(df_flight2$AnnualPrecip))
df_flight2$PrecipRange = as.numeric(as.character(df_flight2$PrecipRange))
df_flight2$Mass = log10(df_flight2$Mass)
df_flight2$Beak_length_Culmen = log10(df_flight2$Beak_length_Culmen)
df_flight2$Beak_length_Nares = log10(df_flight2$Beak_length_Nares)
df_flight2$Beak_width = log10(df_flight2$Beak_width)
df_flight2$Beak_depth = log10(df_flight2$Beak_depth)
df_flight2$Tarsus_length = log10(df_flight2$Tarsus_length)
df_flight2$Wing_length = log10(df_flight2$Wing_length)
df_flight2$Kipps_distance = log10(df_flight2$Kipps_distance)
df_flight2$Hand_wing_index = log10(df_flight2$Hand_wing_index)
df_flight2$Tail_length = log10(df_flight2$Tail_length)
df_flight2$TempRange = log10(df_flight2$TempRange)
df_flight2$AnnualPrecip = log10(df_flight2$AnnualPrecip)
df_flight2$PrecipRange = log10(df_flight2$PrecipRange)
df_flight2$Mass = log10(df_flight2$Mass)
df_flight2 = merge(df_flight2, df_need)
df_flight2$ChThSkew = as.numeric(as.character(df_flight2$ChThSkew))
row.names(df_flight2) = df_flight2$species_name
#Starting coloring tree
## extract total body length and log-transform
lnTL<-setNames(df_flight2$GhAhSkew,rownames(df_flight2))
head(lnTL)
## estimate ancestral states using fastAnc
fit.lnTL<-fastAnc(birds_ms_and_temp_tree,lnTL,vars=TRUE,CI=TRUE)
print(fit.lnTL,printlen=10)
## compute "contMap" object
birds_contMap<-contMap(birds_ms_and_temp_tree,lnTL,
plot=FALSE)
## plot "contMap" object
#plot(birds_contMap,sig=2,fsize=c(0.45,0.9),
#     lwd=c(2,3))
## identify the tips descended from node 102
#write.tree(birds_ms_tree, 'flying_mt_data.tre')
tips<-extract.clade(birds_ms_and_temp_tree,'Node690')$tip.label #699 - peng, 690 peng + ant 582 non-flying 496 ducks
tips
## prune "contMap" object to retain only these tips
pruned.contMap_peng<-keep.tip.contMap(birds_contMap,tips)
tips<-extract.clade(birds_ms_and_temp_tree,'Node582')$tip.label #699 - peng, 690 peng + ant 582 non-flying
pruned.contMap_paleo<-keep.tip.contMap(birds_contMap,tips)
tips<-extract.clade(birds_ms_and_temp_tree,'Node496')$tip.label #699 - peng, 690 peng + ant 582 non-flying
pruned.contMap_ducks<-keep.tip.contMap(birds_contMap,tips)
pruned.contMap_peng
plot(pruned.contMap_peng)
plot(pruned.contMap_paleo)
plot(pruned.contMap_ducks)
rm(list = ls(all=TRUE))
