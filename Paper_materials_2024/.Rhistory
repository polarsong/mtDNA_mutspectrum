gene_stats = unique(gene_stats)
row.names(gene_stats) = gene_stats$species_name
gene_stats = gene_stats[, colSums(is.na(gene_stats)) < nrow(gene_stats)]
stats_pca = prcomp(gene_stats[c(2,3,4,5,6,7,8)], center = TRUE, scale. = TRUE)
summary(stats_pca)
PCA_mtDNA_metrics = autoplot(stats_pca,
loadings = TRUE,
loadings.label = TRUE)
birds_pca = data.frame(stats_pca$x)
birds_pca = birds_pca[,c(1,2)]
birds_pca$species_name = row.names(birds_pca)
gene_stats$species_name = row.names(gene_stats)
gene_stats = merge(gene_stats, birds_pca, by = 'species_name')
row.names(gene_stats) = gene_stats$species_name
gene_stats = gene_stats[,c(2:12)]
Density_PC1_eco = ggplot(gene_stats, aes(x=PC1, color=realm)) +
geom_density(linewidth = 1)+
theme_bw()+
theme(axis.title = element_text(size = 29), axis.text = element_text(size = 25))+
xlab('PC1 (48.0%)')+
ylab('Density')+
scale_colour_manual(name="Origin", values= c("black", "red", "black", "black", "black", "black", "black", "black", "black"))+
theme(legend.position="none")
df_dive_final = merge(df_dive, df_short, by = 'species_name')
df_dive_final = df_dive_final[df_dive_final$diving != 'waterbird',]
df_dive_final[df_dive_final$diving == '0',]$diving = 'Non-diving birds'
diving_skew = ggplot(df_dive_final, aes(x = diving, y = GhAhSkew))+
geom_point()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
xlab('Birds groups')+
xlim('Non-diving birds', "Anseriformes", "Sphenisciformes", "Podicipediformes", "Gaviiformes", "Suliformes", "Coraciiformes", "Passeriformes", "Gruiformes", "Charadriiformes", "Procellariiformes")
mut_data = read.table("mutspec12.tsv", header = TRUE, fill = TRUE)
mut_data_syn = mut_data[mut_data$Label == 'syn',]
mut_data_syn = mut_data_syn[,c(1,2,3,4,5,7,8)]
mut_data_syn = mut_data_syn[!grepl('Node', mut_data_syn$AltNode),]
names(mut_data_syn) = c('Mut', 'ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'species_name', 'Label')
mut_data_syn$MutSpec =  as.numeric(mut_data_syn$MutSpec)
AC = mut_data_syn[mut_data_syn$Mut == 'A>C',]
AG = mut_data_syn[mut_data_syn$Mut == 'A>G',]
AT = mut_data_syn[mut_data_syn$Mut == 'A>T',]
GC = mut_data_syn[mut_data_syn$Mut == 'G>C',]
GT = mut_data_syn[mut_data_syn$Mut == 'G>T',]
GA = mut_data_syn[mut_data_syn$Mut == 'G>A',]
CG = mut_data_syn[mut_data_syn$Mut == 'C>G',]
CT = mut_data_syn[mut_data_syn$Mut == 'C>T',]
CA = mut_data_syn[mut_data_syn$Mut == 'C>A',]
TG = mut_data_syn[mut_data_syn$Mut == 'T>G',]
TC = mut_data_syn[mut_data_syn$Mut == 'T>C',]
TA = mut_data_syn[mut_data_syn$Mut == 'T>A',]
AC = replace(AC, 'A>C', 'T>G')
AC = AC[,c(2,3,4,5,6,7,8)]
names(AC) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
AG = replace(AG, 'A>G', 'T>C')
AG = AG[,c(2,3,4,5,6,7,8)]
names(AG) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
AT = replace(AT, 'A>T', 'T>A')
AT = AT[,c(2,3,4,5,6,7,8)]
names(AT) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
GC = replace(GC, 'G>C', 'C>G')
GC = GC[,c(2,3,4,5,6,7,8)]
names(GC) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
GT = replace(GT, 'G>T', 'C>A')
GT = GT[,c(2,3,4,5,6,7,8)]
names(GT) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
GA = replace(GA, 'G>A', 'C>T')
GA = GA[,c(2,3,4,5,6,7,8)]
names(GA) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
CG = replace(CG, 'C>G', 'G>C')
CG = CG[,c(2,3,4,5,6,7,8)]
names(CG) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
CT = replace(CT, 'C>T', 'G>A')
CT = CT[,c(2,3,4,5,6,7,8)]
names(CT) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
CA = replace(CA, 'C>A', 'G>T')
CA = CA[,c(2,3,4,5,6,7,8)]
names(CA) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
TG = replace(TG, 'T>G', 'A>C')
TG = TG[,c(2,3,4,5,6,7,8)]
names(TG) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
TC = replace(TC, 'T>C', 'A>G')
TC = TC[,c(2,3,4,5,6,7,8)]
names(TC) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
TA = replace(TA, 'T>A', 'A>T')
TA = TA[,c(2,3,4,5,6,7,8)]
names(TA) = c('ObsNum', 'ExpNum', 'RawMutSpec', 'MutSpec', 'Label','species_name', 'Mut')
mut_data_syn1 = rbind(AC, AG, AT, GC, GT, GA, CT, CA, CG, TA, TG, TC)
mutspec_graph = ggplot(data = mut_data_syn1, aes(x = Mut, y = MutSpec)) +
geom_boxplot()+
ylab('Mitochondrial DNA mutational spectrum')+
xlab('Mitochondrial DNA mutations')
df_flight = read.csv('flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
flying_tree = read.tree('flying_birds_tree.tre')
name.check(flying_tree, df_flight)
df_flight$ability_to_fly = as.character(df_flight$ability_to_fly)
df_flight$GhAhSkew = as.numeric(as.character(df_flight$GhAhSkew))
df_flight$fAn = as.numeric(as.character(df_flight$fAn))
df_flight$fGn = as.numeric(as.character(df_flight$fGn))
df_flight$flight_num = as.numeric(as.character(df_flight$flight_num))
df_fly_peng = df_flight[df_flight$ability_to_fly == 'Flying' | df_flight$ability_to_fly =='Sphenisciformes',]
df_fly_not = df_flight[df_flight$ability_to_fly !='Sphenisciformes',]
peng_fly_tree = read.tree('flying_and_peng.tre')
no_peng_fly_tree = read.tree('flying_and_no_peng.tre')
spp = rownames(df_fly_peng)
corBM = corBrownian(phy=peng_fly_tree,form=~spp)
pgls_flying = gls(GhAhSkew~ability_to_fly,
data=df_fly_peng,correlation=corBM)
corLambda<-corPagel(value=1,phy=peng_fly_tree,form=~spp)
pgls_flying = gls(GhAhSkew~ability_to_fly,
data=df_fly_peng,correlation=corLambda)
df_temp_fly = read.csv('birds_metrics.csv')
df_temp_fly = df_temp_fly[,c(2:17)]
df_peng_mass = merge(df_fly_peng, df_temp_fly)
df_peng_mass$Mass = as.numeric(df_peng_mass$Mass)
df_peng_mass$logMass = log10(df_peng_mass$Mass)
df_peng_mass$ability_to_fly_binar = 0
df_peng_mass[df_peng_mass$ability_to_fly == 'Sphenisciformes',]$ability_to_fly_binar = 1
df_peng_mass1 = df_peng_mass[df_peng_mass$ability_to_fly == 'Sphenisciformes',]
df_paly_mass = merge(df_fly_not, df_temp_fly)
df_paly_mass$Mass = as.numeric(df_paly_mass$Mass)
df_paly_mass$logMass = log10(df_paly_mass$Mass)
spp = rownames(df_fly_not)
corLambda<-corPagel(value = 0, phy=no_peng_fly_tree,form=~spp)
control <- glsControl(maxIter = 1000, msMaxIter=4000, returnObject = TRUE)
pgls_flying = gls(GhAhSkew~ability_to_fly,
data=df_fly_not,correlation=corLambda, control = control)
summary(pgls_flying)
df_paly_mass = merge(df_fly_not, df_temp_fly)
df_paly_mass$Mass = as.numeric(df_paly_mass$Mass)
df_paly_mass$logMass = log10(df_paly_mass$Mass)
df_paly_mass$fly_zero_non_fly_one = 0
df_paly_mass[df_paly_mass$ability_to_fly != 'Flying',]$ability_to_fly = 'Non-flying'
df_paly_mass[df_paly_mass$ability_to_fly == 'Non-flying',]$fly_zero_non_fly_one = 1
df_mutspec = read.table('mutspec12.tsv', header = TRUE, fill = TRUE)
df_ff = df_mutspec[df_mutspec$Label == 'ff',]
df_syn = df_mutspec[df_mutspec$Label == 'syn',]
df_ff = df_ff[!grepl('Node', df_ff$AltNode),]
df_ff = df_ff[,c(1,5,7)]
df_ff1 = reshape(data = df_ff, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_ff1) = c('species_name', 'Mutation_TG', 'Mutation_TC', 'Mutation_TA', 'Mutation_GT', 'Mutation_GC',
'Mutation_GA', 'Mutation_CT', 'Mutation_CG', 'Mutation_CA', 'Mutation_AT', 'Mutation_AG', 'Mutation_AC')
df_syn = df_syn[!grepl('Node', df_syn$AltNode),]
df_syn = df_syn[,c(1,5,7)]
df_syn1 = reshape(data = df_syn, idvar = 'AltNode',
timevar = 'Mut',
direction = 'wide')
names(df_syn1) = c('species_name', 'Mutation_TG_syn', 'Mutation_TC_syn', 'Mutation_TA_syn', 'Mutation_GT_syn', 'Mutation_GC_syn',
'Mutation_GA_syn', 'Mutation_CT_syn', 'Mutation_CG_syn', 'Mutation_CA_syn', 'Mutation_AT_syn', 'Mutation_AG_syn', 'Mutation_AC_syn')
df_fly_peng1 = merge(df_fly_peng, df_ff1)
df_fly_peng1 = merge(df_fly_peng1, df_syn1)
need_species = setdiff(df_fly_peng$species_name, df_fly_peng1$species_name)
correct_need_species = setdiff(df_fly_peng$species_name, need_species)
peng_fly_tree1<-keep.tip(peng_fly_tree,correct_need_species)
df_fly_peng1$Mutation_AG = as.numeric(df_fly_peng1$Mutation_AG)
df_fly_peng1$Mutation_AG_syn = as.numeric(df_fly_peng1$Mutation_AG_syn)
df_fly_peng1$Mutation_CT = as.numeric(df_fly_peng1$Mutation_CT)
df_fly_peng1$Mutation_CT_syn = as.numeric(df_fly_peng1$Mutation_CT_syn)
df_fly_peng1$fly_zero_non_fly_one = 0
df_fly_peng1[df_fly_peng1$ability_to_fly == 'Sphenisciformes',]$fly_zero_non_fly_one = 1
df_fly_peng1$ability_to_fly_binar_extra = 1
df_fly_peng1[df_fly_peng1$ability_to_fly == 'Sphenisciformes',]$ability_to_fly_binar_extra = 0
row.names(df_fly_peng1) = df_fly_peng1$species_name
spp1 = rownames(df_fly_peng1)
corLambda1<-corPagel(value = 0, phy=peng_fly_tree1,form=~spp1)
control <- glsControl(maxIter = 1000, msMaxIter=4000, returnObject = TRUE)
pgls_mt_peng1 = gls(GhAhSkew~fly_zero_non_fly_one,
data=df_fly_peng1,correlation=corLambda1, control = control)
df_fly_not1 = merge(df_fly_not, df_ff1)
df_fly_not1 = merge(df_fly_not1, df_syn1)
need_species = setdiff(df_fly_not$species_name, df_fly_not1$species_name)
correct_need_species = setdiff(df_fly_not$species_name, need_species)
not_fly_tree = read.tree('flying_and_no_peng.tre')
not_fly_tree1<-keep.tip(not_fly_tree,correct_need_species)
df_fly_not1$Mutation_AG = as.numeric(df_fly_not1$Mutation_AG)
df_fly_not1$Mutation_AG_syn = as.numeric(df_fly_not1$Mutation_AG_syn)
df_fly_not1$Mutation_CT = as.numeric(df_fly_not1$Mutation_CT)
df_fly_not1$Mutation_CT_syn = as.numeric(df_fly_not1$Mutation_CT_syn)
df_fly_not2 = df_fly_not1
df_fly_not2[df_fly_not2$ability_to_fly != 'Flying',]$ability_to_fly = 'Non-flying'
df_fly_not1$fly_zero_non_fly_one = 0
df_fly_not1[df_fly_not1$ability_to_fly != 'Flying',]$fly_zero_non_fly_one = 1
row.names(df_fly_not1) = df_fly_not1$species_name
spp2 = rownames(df_fly_not1)
corBM2 = corPagel(value = 0, phy=not_fly_tree1,form=~spp2)
pgls_mt_not_fly = gls(GhAhSkew~fly_zero_non_fly_one,
data=df_fly_not1,correlation=corBM2)
corLambda2<-corPagel(value = 0, phy=not_fly_tree1,form=~spp2)
control <- glsControl(maxIter = 1000, msMaxIter=4000, returnObject = TRUE)
pgls_mt_not_fly1 = gls(Mutation_AG_syn~fly_zero_non_fly_one,
data=df_fly_not1,correlation=corLambda2, control = control)
summary(pgls_mt_not_fly1)
df_dive = read.csv('dive_and_gene.csv')
df_dive = df_dive[,c(2:6)]
dive_tree = read.tree('diving_birds_tree.tre')
row.names(df_dive) = df_dive$species_name
df_dive1 = merge(df_dive, df_syn1)
unique(df_dive1$ability_to_dive)
df_dive1[df_dive1$ability_to_dive == 'Anseriformes',]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Sphenisciformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Podicipediformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Gaviiformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Suliformes",]$ability_to_dive = 'Diving_all_species'
df_dive1[df_dive1$ability_to_dive == "Charadriiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Coraciiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Passeriformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Procellariiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1[df_dive1$ability_to_dive == "Gruiformes",]$ability_to_dive = 'Diving_some_species'
df_dive1$GhAhSkew = as.numeric(as.character(df_dive1$GhAhSkew))
df_dive1$Mutation_AG_syn = as.numeric(as.character(df_dive1$Mutation_AG_syn))
row.names(df_dive1) = df_dive1$species_name
need_species = setdiff(df_dive$species_name, df_dive1$species_name)
correct_need_species = setdiff(df_dive$species_name, need_species)
dive_tree1 = keep.tip(dive_tree,correct_need_species)
df_dive1$ability_to_dive_binar = 0
df_dive1[df_dive1$ability_to_dive != 'Non-diving',]$ability_to_dive_binar = 1
spp4 = rownames(df_dive1)
corBM4 = corBrownian(phy=dive_tree1,form=~spp4)
pgls_dive = gls(GhAhSkew~ability_to_dive_binar,
data=df_dive1,correlation=corBM4)
summary(pgls_dive)
corLambda4<-corPagel(value = 0, phy=dive_tree1,form=~spp4)
control <- glsControl(maxIter = 1000, msMaxIter=4000, returnObject = TRUE)
pgls_dive1 = gls(Mutation_AG_syn~ability_to_dive_binar,
data=df_dive1,correlation=corLambda4, control = control)
summary(pgls_dive1)
df_dive11 = df_dive1[df_dive1$ability_to_dive != 'Diving_some_species',]
row.names(df_dive11) = df_dive11$species_name
need_species = setdiff(df_dive1$species_name, df_dive11$species_name)
correct_need_species = setdiff(df_dive1$species_name, need_species)
dive_tree11 = keep.tip(dive_tree1,correct_need_species)
spp5 = rownames(df_dive11)
corBM5 = corPagel(value = 0, phy=dive_tree11,form=~spp5)
pgls_dive1 = gls(GhAhSkew~ability_to_dive_binar,
data=df_dive11,correlation=corBM5)
summary(pgls_dive1)
corLambda5<-corPagel(value = 0, phy=dive_tree11,form=~spp5)
control <- glsControl(maxIter = 1000, msMaxIter=4000, returnObject = TRUE)
pgls_dive11 = gls(Mutation_AG_syn~ability_to_dive_binar,
data=df_dive11,correlation=corLambda5, control = control)
summary(pgls_dive11)
rm(list = ls(all=TRUE))
library(ggbiplot)
library(ggplot2)
library(ggpubr)
library(plotly)
#Частоты
df_mtdna = read.csv('../../Head/2Scripts/Birds_dataset_paper.csv')
#Частоты
df_mtdna = read.csv('../Head/2Scripts/Birds_dataset_paper.csv')
f1 = ggplot(data = df_mtdna, aes(x = gene_name, y = fTn))+
geom_boxplot(outlier.shape = NA)+
xlab('Митохондриальные гены')+
ylab('Частоты тимина')+
ylim(0, 0.7)
f1 = f1 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f1 = f1 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f2 = ggplot(data = df_mtdna, aes(x = gene_name, y = fCn))+
geom_boxplot(outlier.shape = NA)+
xlab('Митохондриальные гены')+
ylab('Частоты цитозина')+
ylim(0, 0.7)
f2 = f2 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f2 = f2 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f3 = ggplot(data = df_mtdna, aes(x = gene_name, y = fGn))+
geom_boxplot(outlier.shape = NA)+
xlab('Митохондриальные гены')+
ylab('Частоты гуанина')+
ylim(0, 0.7)
f3 = f3 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f3 = f3 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f4 = ggplot(data = df_mtdna, aes(x = gene_name, y = fAn))+
geom_boxplot(outlier.shape = NA)+
xlab('Митохондриальные гены')+
ylab('Частоты аденина')+
ylim(0, 0.7)
f4 = f4 +xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
f4 = f4 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
f5 = ggarrange(f1, f3, f2, f4,
ncol = 2, nrow = 2)
f5
#Скосы
skew_all = ggplot(data = df_mtdna, aes(x = gene_name, y = ghahSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Митохондриальные гены')+
ylab('Метрика окислительного стресса (GhAhSkew)')
skew_all = skew_all + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
skew_all
skew_all1 = ggplot(data = df_mtdna, aes(x = gene_name, y = chthSkew))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Митохондриальные гены')+
ylab('ThChSkew')
skew_all1 = skew_all1 + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
skew_all1
stg_all = ggplot(data = df_mtdna, aes(x = gene_name, y = Stg_Sac))+
geom_boxplot(outlier.shape = NA, notch = T)+
xlab('Митохондриальные гены')+
ylab('Stg-Sac')
stg_all = stg_all + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND1","ND2"))
stg_all
#Млеки и птицы
unzip("../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../Body/3Results/")
SynNuc = read.table("../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
names(SynNuc)
SynNuc$ghahSkew = ((SynNuc$NeutralC - SynNuc$NeutralT))/((SynNuc$NeutralC + SynNuc$NeutralT))
SynNuc$chthSkew = ((SynNuc$NeutralA - SynNuc$NeutralG))/((SynNuc$NeutralA + SynNuc$NeutralG))
new_mam = SynNuc[, c(1, 2, 79, 80)]
new_mam = new_mam[new_mam$Gene != 'ND6',]
new_mam$class = 'Mammalia'
new_bird = df_mtdna[, c('species_name', 'gene_name', 'ghahSkew','chthSkew')]
new_bird$class = 'Aves'
new_bird$species_name = gsub(' ', '_', new_bird$species_name)
new_bird$gene_name[new_bird$gene_name == 'CYTB'] = 'CytB'
names(new_mam) = c('species_name', 'gene_name', 'ghahSkew', 'chthSkew', 'class')
new_big = rbind(new_mam, new_bird)
new_b_and_m = ggplot(new_big, aes(x = gene_name, y = ghahSkew, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Митохондриальные гены')+
ylab('Метрика окислительного стресса (GhAhSkew)')+
scale_fill_hue(labels = c("Птицы", "Млекопитающие"))
new_b_and_m = new_b_and_m + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m = new_b_and_m + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
new_b_and_m
new_b_and_m = ggplot(new_big, aes(x = gene_name, y = ghahSkew, fill = class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Mitochondrial genes')+
ylab('GhAhSkew')+
scale_fill_hue(labels = c("Birds", "Mammals"))
new_b_and_m = new_b_and_m + xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CytB","ND1","ND2"))
new_b_and_m = new_b_and_m + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
new_b_and_m
#Картинки для дипома/практики
rm(list = ls(all=TRUE))
rm(list = ls(all=TRUE))
library(ggfortify)
library(ggplot2)
library(ggpubr)
library(ggbiplot)
library(phytools)
library(nlme)
library(geiger)
library(ggtree)
library(stringr)
library(dplyr)
df_mtdna = read.csv('Birds_dataset_paper.csv')
df_nd6 = read.csv('Birds_mtDNA_data.csv')
df_nd6$GhAhSkew = (df_nd6$neutral_g - df_nd6$neutral_A)/(df_nd6$neutral_g + df_nd6$neutral_A)
df_nd6$ThChSkew = (df_nd6$neutral_T - df_nd6$neutral_c)/(df_nd6$neutral_T + df_nd6$neutral_c)
df_nd6$fTn = df_nd6$neutral_T/df_nd6$neutral_amount
df_nd6$fAn = df_nd6$neutral_A/df_nd6$neutral_amount
df_nd6$fCn = df_nd6$neutral_c/df_nd6$neutral_amount
df_nd6$fGn = df_nd6$neutral_g/df_nd6$neutral_amount
df_nd6$GhAhSkew = (df_nd6$neutral_c- df_nd6$neutral_T)/(df_nd6$neutral_c + df_nd6$neutral_T)
df_nd6$ThChSkew = (df_nd6$neutral_A - df_nd6$neutral_g)/(df_nd6$neutral_A + df_nd6$neutral_g)
df_nd6$fTn = df_nd6$neutral_A/df_nd6$neutral_amount
df_nd6$fAn = df_nd6$neutral_T/df_nd6$neutral_amount
df_nd6$fCn = df_nd6$neutral_g/df_nd6$neutral_amount
df_nd6$fGn = df_nd6$neutral_c/df_nd6$neutral_amount
graph1 = ggplot(data = df_nd6, aes(x = gene_name, y = fTn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Thymine frequency')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph1
graph2 = ggplot(data = df_nd6, aes(x = gene_name, y = fCn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Cytosine frequency')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph2
graph3 = ggplot(data = df_nd6, aes(x = gene_name, y = fAn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Adenine frequency')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph4 = ggplot(data = df_nd6, aes(x = gene_name, y = fGn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Guanine frequency')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph5
graph5 = ggplot(data = df_nd6, aes(x = gene_name, y = GhAhSkew))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(-1,1)+
xlab('Mitochondrial genes')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph5
graph6 = ggplot(data = df_nd6, aes(x = gene_name, y = ThChSkew))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(-1,1)+
xlab('Mitochondrial genes')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
unzip("../Body/3Results/AllGenesCodonUsageNoOverlap.txt.zip", exdir = "../../Body/3Results/")
SynNuc = read.table("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt", header = TRUE, sep = '\t')
if (file.exists("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")) file.remove("../../Body/3Results/AllGenesCodonUsageNoOverlap.txt")
SynNuc$ghahSkew = ((SynNuc$NeutralC - SynNuc$NeutralT))/((SynNuc$NeutralC + SynNuc$NeutralT))
SynNuc$chthSkew = ((SynNuc$NeutralA - SynNuc$NeutralG))/((SynNuc$NeutralA + SynNuc$NeutralG))
new_mam = SynNuc[, c(1, 2, 79, 80)]
new_mam$Сlass = 'Mammalia'
new_bird = df_nd6[, c('species_name', 'gene_name', 'GhAhSkew','ThChSkew')]
new_bird$Сlass = 'Aves'
new_bird$species_name = gsub(' ', '_', new_bird$species_name)
new_mam$Gene[new_mam$Gene == 'CytB'] = 'CYTB'
names(new_mam) = c('species_name', 'gene_name', 'GhAhSkew', 'ThChSkew', 'Class')
names(new_bird) = c('species_name', 'gene_name', 'GhAhSkew', 'ThChSkew', 'Class')
new_big = rbind(new_mam, new_bird)
graph7 = ggplot(new_big, aes(x = gene_name, y = GhAhSkew, fill = Class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Mitochondrial genes')+
ylab('GhAhSkew')+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5",'CYTB',"ND6","ND1","ND2"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")
graph8 = ggplot(new_big, aes(x = gene_name, y = ThChSkew, fill = Class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Mitochondrial genes')+
ylab('ThChSkew')+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5",'CYTB',"ND6","ND1","ND2"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")
graph2 = ggplot(data = df_nd6, aes(x = gene_name, y = fCn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Cytosine frequency')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
graph3 = ggplot(data = df_nd6, aes(x = gene_name, y = fAn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Adenine frequency')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggarrange(graph1, graph4,graph5, graph6, graph2, graph3, graph7, graph8,
ncol = 4, nrow = 2)
ggarrange(graph1, graph4, graph2, graph3, graph5, graph6, graph7, graph8,
ncol = 2, nrow = 4)
graph1 = ggplot(data = df_nd6, aes(x = gene_name, y = fTn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Thymine frequency')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph2 = ggplot(data = df_nd6, aes(x = gene_name, y = fCn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Cytosine frequency')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph3 = ggplot(data = df_nd6, aes(x = gene_name, y = fAn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Adenine frequency')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph4 = ggplot(data = df_nd6, aes(x = gene_name, y = fGn))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(0, 0.8)+
xlab('Mitochondrial genes')+
ylab('Guanine frequency')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph5 = ggplot(data = df_nd6, aes(x = gene_name, y = GhAhSkew))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(-1,1)+
xlab('Mitochondrial genes')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph6 = ggplot(data = df_nd6, aes(x = gene_name, y = ThChSkew))+
geom_boxplot(notch = TRUE)+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5","CYTB","ND6","ND1","ND2"))+
ylim(-1,1)+
xlab('Mitochondrial genes')+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),axis.ticks.x=element_blank())
graph7 = ggplot(new_big, aes(x = gene_name, y = GhAhSkew, fill = Class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Mitochondrial genes')+
ylab('GhAhSkew')+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5",'CYTB',"ND6","ND1","ND2"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")
graph8 = ggplot(new_big, aes(x = gene_name, y = ThChSkew, fill = Class))+
geom_boxplot(notch = TRUE, outlier.alpha = FALSE)+
xlab('Mitochondrial genes')+
ylab('ThChSkew')+
xlim(c("COX1","COX2","ATP8","ATP6","COX3", "ND3", "ND4L","ND4","ND5",'CYTB',"ND6","ND1","ND2"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")
var_2 = ggarrange(graph1, graph4, graph2, graph3, graph5, graph6, graph7, graph8,
ncol = 2, nrow = 4)
ggarrange(graph1, graph4, graph2, graph3, graph5, graph6, graph7, graph8,
ncol = 2, nrow = 4)
rm(list = ls(all=TRUE))
