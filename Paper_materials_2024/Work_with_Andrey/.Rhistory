typeof(c)
df_short = data.frame()
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
с = df1$Mass
ab = c(i, a, b)
df_short = rbind(df_short, ab)
}
typeof(c)
View(df1)
df_short = data.frame()
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
v = df1$Mass
ab = c(i, a, b)
df_short = rbind(df_short, ab)
}
typeof(v)
df_short = data.frame()
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
v = sum(df1$Mass)/12
ab = c(i, a, b, c)
df_short = rbind(df_short, ab)
}
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
v = sum(df1$Mass)/12
ab = c(i, a, b, v)
df_short = rbind(df_short, ab)
}
names(df_short) = c('Species', 'GhAhSkew', 'ThChSkew', 'Mass')
View(df_short)
df_short$GhAhSkew = as.numeric(df_short$GhAhSkew)
df12_bmr = df12[df12$Trait == 'BMR',]
names_v = unique(df12_bmr$Original_Name)
df_short1 = data.frame()
for (i in names_v)
{
df1 = df12_bmr[df12_bmr$Original_Name == i,]
a1 = sum(df1$TraitValue)
a2 = nrow(df1)
a = a1/a2
b = 'BMR'
ab = c(i, b, a)
df_short1 = rbind(df_short1, ab)
}
names(df_short1) = c('Species', 'Trait', 'BMR_value')
df_short$GhAhSkew = as.numeric(df_short$GhAhSkew)
df_short2 = merge(df_short, df_short1)
df_short2$BMR_value = as.numeric(df_short2$BMR_value)
df_short2 = merge(df_short2, df_mtdna_orders)
lm1 = lm(log10(BMR_value)~GhAhSkew, data = df_short2)
abc = summary(lm1)
abc1 = abc$coefficients[,4][2]
ggplot(df_short2, aes(x = log10(BMR_value), y = GhAhSkew))+
geom_point()+
geom_smooth(method = 'lm', formula = y~x)+
annotate('text', x = (min(log10(df_short2$BMR_value))+1), y = min(df_short2$GhAhSkew), label = round(abc1, digits = 4))
df_short2$log10BMR = log10(df_short2$BMR_value)
counter = 0
for (i in unique(df_short2$Orders))
{
a = df_short2[df_short2$Orders == i,]
linearMod <- lm(log10BMR~GhAhSkew, data=a)
modelSummary = summary(linearMod)
c = modelSummary$coefficients[,4][2]
b = ggplot(a, aes(x = log10BMR, y = GhAhSkew))+
geom_point()+
ggtitle(i)+
geom_smooth(method = 'lm', formula = y~x)+
annotate('text', x = (min(a$log10BMR)+1), y = min(a$GhAhSkew), label = round(c, digits = 4))
assign(paste0("Order_", i), b)
counter = counter + 1
}
View(df_short2)
df_short2$log10Mass = log10(df_short2$Mass)
df_short2$Mass = as.numeric(df_short2$Mass)
df_short2$log10Mass = log10(df_short2$Mass)
lmMassBMR = lm(GhAhSkew~log10BMR + log10Mass, data=df_short2)
summary(lmMassBMR)
lmMassBMR1 = lm(GhAhSkew~log(BMR_value) + log(Mass), data=df_short2)
summary(lmMassBMR1)
lmMassBMR = lm(GhAhSkew~log10Mass+log10BMR , data=df_short2)
summary(lmMassBMR)
res = resid(lmMassBMR)
plot(fitted(lmMassBMR), res)
abline(0,0)
qqnorm(res)
qqline(res)
plot(lmMassBMR)
shapiro.test(rstandard(lmMassBMR))
View(df_short2)
df_short_pos = df_short2[df_short2$GhAhSkew >= 0,]
df_short_pos$log10GhAhSkew = log10(df_short_pos$GhAhSkew)
View(df_short_pos)
lmMassBMR1 = lm(log10GhAhSkew~log(BMR_value) + log(Mass), data=df_short_pos)
summary(lmMassBMR1)
AIC(lmMassBMR, lmMassBMR1)
lmMassBMR12 = lm(GhAhSkew~log(BMR_value) + log(Mass), data=df_short_pos)
summary(lmMassBMR12)
AIC(lmMassBMR12, lmMassBMR1)
rm(list = ls(all=TRUE))
rm(list = ls(all=TRUE))
library(ggfortify)
library(ggplot2)
library(ggpubr)
library(ggbiplot)
library(phytools)
library(nlme)
library(geiger)
library(ggtree)
library(stringr)
library(dplyr)
df_mtdna = read.csv('../../Paper_materials_2024/Birds_dataset_paper.csv')
names_v = unique(df_mtdna$species_name)
df_mtdna$Mass = as.numeric(as.character(df_mtdna$Mass))
df_short = data.frame()
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
v = sum(df1$Mass)/12
ab = c(i, a, b, v)
df_short = rbind(df_short, ab)
}
names(df_short) = c('Species', 'GhAhSkew', 'ThChSkew', 'Mass')
df_short$GhAhSkew = as.numeric(df_short$GhAhSkew)
df_temp = read.csv('temp_new_data.csv')
View(df_short)
View(df_temp)
df_big = merge(df_short, df_temp, by = 'Species')
View(df_big)
ggplot(df_big, aes(x = TNZ, y = GhAhSkew))+
geom_point()
lm_temp = lm(GhAhSkew~TNZ, data=df_big)
modelSummary = summary(lm_temp)
ggplot(df_big, aes(x = TNZ, y = GhAhSkew))+
geom_point()+
geom_smooth(method = 'lm', formula = y~x)+
annotate('text', x = (min(df_big$TNZ)+1), y = min(df_big$GhAhSkew), label = round(modelSummary, digits = 4))
ggplot(df_big, aes(x = TNZ, y = GhAhSkew))+
geom_point()+
geom_smooth(method = 'lm', formula = y~x)+
annotate('text', x = (min(df_big$TNZ)+1), y = min(df_big$GhAhSkew), label = round(modelSummary$coefficients[,4][2], digits = 4))
plot(modelSummary)
plot(lm_temp)
shapiro.test(rstandard(lm_temp))
rm(list = ls(all=TRUE))
BMR <- read.csv2("GlobalBMRbase.csv", header=T)
DNA <- read.csv2("Birds_dataset_paper.csv", header=T)
DNA <- read.csv2("Birds_dataset_paper.csv", header=T)
DNA <- DNA[c('Species', 'ghahSkew', 'chthSkew')]
DNA <- subset(DNA, Species!="Nothoprocta perdicaria")
BMR <- BMR[c('Species', 'Mass', 'TraitValue')]
View(DNA)
DNA <- aggregate (DNA[,-1], by=list(DNA$Species), mean)
View(DNA)
View(BMR)
BMR <- aggregate (BMR[,-1], by=list(BMR$Species), mean)
BMR$log_Mass <- log10(BMR$Mass)
BMR$log_BMR <- log10(BMR$TraitValue)
BMR <- merge(BMR, DNA, by="Group.1", all.x=T)
BMR <- na.omit(BMR)
colnames(BMR)[1] <- "Species"
model_1 <- lm(ghahSkew ~ log_Mass + log_BMR, data=BMR)
model_2 <- lm(log10(ghahSkew) ~ log_Mass + log_BMR, data=BMR)
model_3 <- lm(chthSkew ~ log_Mass + log_BMR, data=BMR)
model_4 <- lm(log10(chthSkew) ~ log_Mass + log_BMR, data=BMR)
library(bbmle)
AICctab (model_1, model_2, weights=T)
AICctab (model_3, model_4, weights=T)
model <- model_1
library(olsrr) # To perform Residual Diagnostics
ols_plot_resid_qq(model) # Graph for detecting violation of normality assumption
ols_test_normality(model) # Test for detecting violation of normality assumption
ols_test_correlation(model) # Correlation between observed residuals and expected residuals under normality
ols_plot_resid_hist(model) # Histogram of residuals for detecting violation of normality assumption
ols_plot_resid_fit(model) # Residual vs Fitted Values Plot (scatter plot of residuals on the y axis and fitted values on the x axis to detect non-linearity, unequal error variances, and outliers)
plot(model)
library(nortest); library(see); library (performance)
check_normality(model) # same as shapiro.test(rstandard(model)) for LM
library(nortest)
library(see)
library (performance)
check_normality(model) # same as shapiro.test(rstandard(model)) for LM
plot(check_normality(model)) # plot residuals and Gaussian distribution
check_normality(model) # same as shapiro.test(rstandard(model)) for LM
plot(check_normality(model)) # plot residuals and Gaussian distribution
shapiro.test(residuals(model))
shapiro.test(rstandard(model))
shapiro.test(rstudent(model))
library(gvlma)
summary(gvlma(model)) #Tests the main assumptions of regression analysis
plot(gvlma(model))
# Evaluate homoscedasticity
library(car)
ncvTest(model) # non-constant error variance test (Breusch–Pagan test). Null-hypothesis (homoskedasticity) is rejected when p < 0.05 (i.e. presence of Heteroscedasticity)
spreadLevelPlot(model) # plot studentized residuals vs. fitted values
summary (model_1)
plot(residuals(lm(log_BMR~log_Mass, data=BMR)) ~ log10(chthSkew), data=BMR)
abline(lm(residuals(lm(log_BMR~log_Mass, data=BMR)) ~ log10(chthSkew), data=BMR))
###########################################################
library(ape); library(phytools);  library(geiger)
feathertree <- read.tree("anc_kg.tre")
feathertree <- read.tree("anc_kg.tre")
feathertree$node.label <- NULL # Remove internal node labels (if any)
is.ultrametric(feathertree)
is.binary(feathertree)
is.rooted(feathertree)
feathertree <- root(feathertree, outgroup = "Struthio_camelus", resolve.root = TRUE)
mycalibration <- makeChronosCalib(feathertree, node="root", age.max=94)
feathertree <- chronos(feathertree, lambda=0, model = 'correlated', calibration = mycalibration)
is.ultrametric(feathertree)
is.binary(feathertree)
is.rooted(feathertree)
BMR$Species <- gsub(" ", "_", fixed = TRUE, BMR$Species) # Replaces spaces with _
listBMR <- BMR$Species
listTree <- feathertree$tip.label
View(DNA)
#PGLS  for binar metrics
df_flight = read.csv('../../Paper_materials_2024/flight_and_gene.csv')
View(df_flight)
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
rownames(df_flight) = df_flight$species_name
listSkew = df_flight$species_name
SpeciesToDrop <- setdiff(listTree, listSkew)
drop.tip(feathertree, SpeciesToDrop) -> Fly_skew_tree
plotTree(Fly_skew_tree, fsize=0.5)
rownames(df_flight) <- df_flight[,1]
View(feathertree)
df_flight <- df_flight[match(Fly_skew_tree$tip.label,rownames(df_flight)),]
attach(df_flight)
names(flight_num) = rownames(df_flight)
name.check(Fly_skew_tree, df_flight)
m1 <- gls(GhAhSkew~flight_num, data=df_flight, correlation=corPagel(value = 1, Fly_skew_tree, form = ~species_name, fixed=FALSE), method="ML") # ML estimation
summary(m1)
View(Fly_skew_tree)
#PGLS  for binar metrics
df_flight = read.csv('../../Paper_materials_2024/flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
df_flight$flight_num = 0
df_flight[df_flight$ability_to_fly != 'Flying',]$flight_num = 1
df_flight = df_flight[df_flight$ability_to_fly !='Sphenisciformes',]
rownames(df_flight) = df_flight$species_name
listSkew = df_flight$species_name
SpeciesToDrop <- setdiff(listTree, listSkew)
fly_tree
drop.tip(feathertree, SpeciesToDrop) -> Fly_skew_tree
rownames(df_flight) <- df_flight[,1]
df_flight <- df_flight[match(Fly_skew_tree$tip.label,rownames(df_flight)),]
attach(df_flight)
names(GhAhSkew) = rownames(df_flight)
names(flight_num) = rownames(df_flight)
name.check(Fly_skew_tree, df_flight)
library(nlme)
m1 <- gls(GhAhSkew~flight_num, data=df_flight, correlation=corPagel(value = 1, Fly_skew_tree, form = ~species_name, fixed=FALSE), method="ML") # ML estimation
summary(m1)
CompBMR <- comparative.data(Fly_skew_tree, df_flight, 'species_name', na.omit=FALSE, vcv=TRUE, vcv.dim=3) #vcv.dim=2 is default
library(caper)
CompBMR <- comparative.data(Fly_skew_tree, df_flight, 'species_name', na.omit=FALSE, vcv=TRUE, vcv.dim=3) #vcv.dim=2 is default
CompBMR <- comparative.data(Fly_skew_tree, df_flight, 'species_name', na.omit=FALSE, vcv=TRUE, vcv.dim=2) #vcv.dim=2 is default
SpeciesToDrop <- setdiff(listTree, listBMR) #Вычисляет, какие виды убрать из общего дерева
drop.tip(feathertree, SpeciesToDrop) -> BMRTree #Убирает лишние виды из дерева
plotTree(BMRTree, fsize=0.5)
rownames(BMR) <- BMR[,1]
BMR <- BMR[match(BMRTree$tip.label,rownames(BMR)),] # rearranging the rows of the data frame to match the order of species names in the tree object.
names(log_Mass) <- rownames(BMR)
names(log_BMR) <- rownames(BMR)
attach(BMR)
names(log_Mass) <- rownames(BMR)
names(log_BMR) <- rownames(BMR)
names(chthSkew) <- rownames(BMR)
names(ghahSkew) <- rownames(BMR)
name.check(BMRTree, BMR)
library(nlme)
library(caper)
CompBMR <- comparative.data(BMRTree, BMR, 'Species', na.omit=FALSE, vcv=TRUE, vcv.dim=3) #vcv.dim=2 is default
View(BMR)
rm(list = ls(all=TRUE))
BMR <- read.csv2("GlobalBMRbase.csv", header=T)
DNA <- read.csv2("Birds_dataset_paper.csv", header=T)
DNA <- DNA[c('Species', 'ghahSkew', 'chthSkew')]
DNA <- subset(DNA, Species!="Nothoprocta perdicaria")
BMR <- BMR[c('Species', 'Mass', 'TraitValue')]
DNA <- aggregate (DNA[,-1], by=list(DNA$Species), mean)
BMR <- aggregate (BMR[,-1], by=list(BMR$Species), mean)
BMR$log_Mass <- log10(BMR$Mass)
BMR$log_BMR <- log10(BMR$TraitValue)
BMR <- merge(BMR, DNA, by="Group.1", all.x=T)
BMR <- na.omit(BMR)
colnames(BMR)[1] <- "Species"
model_1 <- lm(ghahSkew ~ log_Mass + log_BMR, data=BMR)
model_2 <- lm(log10(ghahSkew) ~ log_Mass + log_BMR, data=BMR)
model_3 <- lm(chthSkew ~ log_Mass + log_BMR, data=BMR)
model_4 <- lm(log10(chthSkew) ~ log_Mass + log_BMR, data=BMR)
library(bbmle)
AICctab (model_1, model_2, weights=T)
AICctab (model_3, model_4, weights=T)
model <- model_1
library(olsrr) # To perform Residual Diagnostics
ols_plot_resid_qq(model) # Graph for detecting violation of normality assumption
ols_test_normality(model) # Test for detecting violation of normality assumption
ols_test_correlation(model) # Correlation between observed residuals and expected residuals under normality
ols_plot_resid_hist(model) # Histogram of residuals for detecting violation of normality assumption
ols_plot_resid_fit(model) # Residual vs Fitted Values Plot (scatter plot of residuals on the y axis and fitted values on the x axis to detect non-linearity, unequal error variances, and outliers)
library(nortest)
library(see)
library (performance)
check_normality(model) # same as shapiro.test(rstandard(model)) for LM
plot(check_normality(model)) # plot residuals and Gaussian distribution
shapiro.test(rstandard(model))
shapiro.test(rstudent(model))
###########################################################
library(ape); library(phytools);  library(geiger)
feathertree <- read.tree("anc_kg.tre")
feathertree$node.label <- NULL # Remove internal node labels (if any)
is.ultrametric(feathertree)
is.binary(feathertree)
is.rooted(feathertree)
feathertree <- root(feathertree, outgroup = "Struthio_camelus", resolve.root = TRUE)
mycalibration <- makeChronosCalib(feathertree, node="root", age.max=94)
feathertree <- chronos(feathertree, lambda=0, model = 'correlated', calibration = mycalibration)
is.ultrametric(feathertree)
is.binary(feathertree)
is.rooted(feathertree)
BMR$Species <- gsub(" ", "_", fixed = TRUE, BMR$Species) # Replaces spaces with _
listBMR <- BMR$Species
listTree <- feathertree$tip.label
SpeciesToDrop <- setdiff(listTree, listBMR) #Вычисляет, какие виды убрать из общего дерева
drop.tip(feathertree, SpeciesToDrop) -> BMRTree #Убирает лишние виды из дерева
plotTree(BMRTree, fsize=0.5)
rownames(BMR) <- BMR[,1]
BMR <- BMR[match(BMRTree$tip.label,rownames(BMR)),] # rearranging the rows of the data frame to match the order of species names in the tree object.
attach(BMR)
names(log_Mass) <- rownames(BMR)
names(log_BMR) <- rownames(BMR)
names(chthSkew) <- rownames(BMR)
names(ghahSkew) <- rownames(BMR)
name.check(BMRTree, BMR)
library(nlme)
m1 <- gls(log_BMR~log_Mass, data=BMR, correlation=corPagel(value = 1, BMRTree, form = ~Species, fixed=FALSE), method="ML") # ML estimation
summary(m1)
library(caper)
CompBMR <- comparative.data(BMRTree, BMR, 'Species', na.omit=FALSE, vcv=TRUE, vcv.dim=3) #vcv.dim=2 is default
View(BMRTree)
rm(list = ls(all=TRUE))
rm(list = ls(all=TRUE))
BMR <- read.csv2("GlobalBMRbase.csv", header=T)
DNA <- read.csv2("Birds_dataset_paper.csv", header=T)
DNA <- DNA[c('Species', 'ghahSkew', 'chthSkew')]
DNA <- subset(DNA, Species!="Nothoprocta perdicaria")
BMR <- BMR[c('Species', 'Mass', 'TraitValue')]
DNA <- aggregate (DNA[,-1], by=list(DNA$Species), mean)
BMR <- aggregate (BMR[,-1], by=list(BMR$Species), mean)
BMR$log_Mass <- log10(BMR$Mass)
BMR$log_BMR <- log10(BMR$TraitValue)
BMR <- merge(BMR, DNA, by="Group.1", all.x=T)
BMR <- na.omit(BMR)
colnames(BMR)[1] <- "Species"
model_1 <- lm(ghahSkew ~ log_Mass + log_BMR, data=BMR)
model_2 <- lm(log10(ghahSkew) ~ log_Mass + log_BMR, data=BMR)
model_3 <- lm(chthSkew ~ log_Mass + log_BMR, data=BMR)
model_4 <- lm(log10(chthSkew) ~ log_Mass + log_BMR, data=BMR)
library(bbmle)
AICctab (model_1, model_2, weights=T)
AICctab (model_3, model_4, weights=T)
model <- model_1
###########################################################
library(ape); library(phytools);  library(geiger)
feathertree <- read.tree("anc_kg.tre")
feathertree$node.label <- NULL # Remove internal node labels (if any)
is.ultrametric(feathertree)
is.binary(feathertree)
is.rooted(feathertree)
feathertree <- root(feathertree, outgroup = "Struthio_camelus", resolve.root = TRUE)
mycalibration <- makeChronosCalib(feathertree, node="root", age.max=94)
feathertree <- chronos(feathertree, lambda=0, model = 'correlated', calibration = mycalibration)
is.ultrametric(feathertree)
is.binary(feathertree)
is.rooted(feathertree)
BMR$Species <- gsub(" ", "_", fixed = TRUE, BMR$Species) # Replaces spaces with _
listBMR <- BMR$Species
listTree <- feathertree$tip.label
#PGLS  for binar metrics
df_flight = read.csv('../../Paper_materials_2024/flight_and_gene.csv')
df_flight = df_flight[,c(2,3,4,5,6)]
SpeciesToDrop <- setdiff(listTree, listBMR) #Вычисляет, какие виды убрать из общего дерева
drop.tip(feathertree, SpeciesToDrop) -> BMRTree #Убирает лишние виды из дерева
plotTree(BMRTree, fsize=0.5)
rownames(BMR) <- BMR[,1]
BMR <- BMR[match(BMRTree$tip.label,rownames(BMR)),] # rearranging the rows of the data frame to match the order of species names in the tree object.
attach(BMR)
names(log_Mass) <- rownames(BMR)
names(log_BMR) <- rownames(BMR)
names(chthSkew) <- rownames(BMR)
names(ghahSkew) <- rownames(BMR)
name.check(BMRTree, BMR)
library(nlme)
m1 <- gls(log_BMR~log_Mass, data=BMR, correlation=corPagel(value = 1, BMRTree, form = ~Species, fixed=FALSE), method="ML") # ML estimation
summary(m1)
library(caper)
CompBMR <- comparative.data(BMRTree, BMR, 'Species', na.omit=FALSE, vcv=TRUE, vcv.dim=3) #vcv.dim=2 is default
str(BMRTree)
rm(list = ls(all=TRUE))
library(ggfortify)
library(ggfortify)
library(ggfortify)
library(ggfortify)
library(ggplot2)
library(ggpubr)
library(ggbiplot)
library(phytools)
library(nlme)
library(geiger)
library(ggtree)
library(stringr)
library(dplyr)
df_mtdna = read.csv('../../Paper_materials_2024/Birds_dataset_paper.csv')
names_v = unique(df_mtdna$species_name)
df_mtdna$Mass = as.numeric(as.character(df_mtdna$Mass))
df_short = data.frame()
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
v = sum(df1$Mass)/12
ab = c(i, a, b, v)
df_short = rbind(df_short, ab)
}
names(df_short) = c('Species', 'GhAhSkew', 'ThChSkew', 'Mass')
df_short$GhAhSkew = as.numeric(df_short$GhAhSkew)
df_temp = read.csv('temp_new_data.csv')
df_big = merge(df_short, df_temp, by = 'Species')
View(df_big)
View(df_temp)
View(df_temp)
View(df_temp)
df_big$Mass.x = as.numeric(df_big$Mass.x)
df_big$logmass = log10(df_big$Mass.x)
lm_temp = lm(GhAhSkew~TNZ+log_Mass, data=df_big)
lm_temp = lm(GhAhSkew~TNZ+logmass, data=df_big)
modelSummary = summary(lm_temp)
ggplot(df_big, aes(x = TNZ, y = GhAhSkew))+
geom_point()+
geom_smooth(method = 'lm', formula = y~x)+
annotate('text', x = (min(df_big$TNZ)+1), y = min(df_big$GhAhSkew), label = round(modelSummary$coefficients[,4][2], digits = 4))
library(ggfortify)
library(ggplot2)
ggplot(df_big, aes(x = TNZ, y = GhAhSkew))+
geom_point()+
geom_smooth(method = 'lm', formula = y~x)+
annotate('text', x = (min(df_big$TNZ)+1), y = min(df_big$GhAhSkew), label = round(modelSummary$coefficients[,4][2], digits = 4))
library(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
library(ggplot2)
ggplot(df_big, aes(x = TNZ, y = GhAhSkew))+
geom_point()+
geom_smooth(method = 'lm', formula = y~x)+
annotate('text', x = (min(df_big$TNZ)+1), y = min(df_big$GhAhSkew), label = round(modelSummary$coefficients[,4][2], digits = 4))
plot(lm_temp)
rm(list = ls(all=TRUE))
library(ggplot2)
remove.packages('ggplot2')
install.packages('ggplot2')
library(ggplot2)
df_mtdna = read.csv('../../Paper_materials_2024/Birds_dataset_paper.csv')
names_v = unique(df_mtdna$species_name)
df_mtdna$Mass = as.numeric(as.character(df_mtdna$Mass))
df_short = data.frame()
for (i in names_v)
{
df1 = df_mtdna[df_mtdna$species_name == i,]
a = sum(df1$ghahSkew)/12
b = sum(df1$chthSkew)/12
v = sum(df1$Mass)/12
ab = c(i, a, b, v)
df_short = rbind(df_short, ab)
}
names(df_short) = c('Species', 'GhAhSkew', 'ThChSkew', 'Mass')
df_short$GhAhSkew = as.numeric(df_short$GhAhSkew)
df_temp = read.csv('temp_new_data.csv')
df_big = merge(df_short, df_temp, by = 'Species')
df_big$Mass.x = as.numeric(df_big$Mass.x)
df_big$logmass = log10(df_big$Mass.x)
lm_temp = lm(GhAhSkew~TNZ+logmass, data=df_big)
modelSummary = summary(lm_temp)
ggplot(df_big, aes(x = TNZ, y = GhAhSkew))+
geom_point()+
geom_smooth(method = 'lm', formula = y~x)+
annotate('text', x = (min(df_big$TNZ)+1), y = min(df_big$GhAhSkew), label = round(modelSummary$coefficients[,4][2], digits = 4))
plot(lm_temp)
shapiro.test(rstandard(lm_temp))
modelSummary
rm(list = ls(all=TRUE))
